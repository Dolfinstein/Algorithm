; // 105 Construct Binary Tree from Preorder and Inorder Traversal
; // use count!!!
; // 本題重點 把inorder left right和preorder left right分清楚
; // 還有停止條件
; // 送進區間，函數會回傳一個node
#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;
 
struct TreeNode {
 int val;
 TreeNode *left;
 TreeNode *right;
 TreeNode() : val(0), left(nullptr), right(nullptr) {}
 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 };
class Solution {
private:
    unordered_map<int, int> index;

public:
    TreeNode* myBuildTree(const vector<int>& preorder, const vector<int>& inorder, int preorder_left, int preorder_right, int inorder_left, int inorder_right) {
        if (preorder_left == preorder_right)
        {
            TreeNode* root = new TreeNode(preorder[preorder_left]);
            return root;
        }
        
        // 前序遍历中的第一个节点就是根节点
        int preorder_root = preorder_left;
        // 在中序遍历中定位根节点
        int inorder_root = index[preorder[preorder_root]];
        
        // 得到左子树中的节点数目
        int size_left_subtree = inorder_root - inorder_left;
        // 先把根节点建立出来
        TreeNode* root = new TreeNode(preorder[preorder_root]);
        
        if (inorder_root == inorder_left && inorder_root != inorder_right) //此情況只作右邊
        {
            root->right = myBuildTree(preorder, inorder, preorder_left + size_left_subtree + 1, preorder_right, inorder_root + 1, inorder_right);
        }
        
        else if (inorder_root == inorder_right && inorder_root != inorder_left) // 只作左邊
        {
            root->left = myBuildTree(preorder, inorder, preorder_left + 1, preorder_left + size_left_subtree, inorder_left, inorder_root - 1);
        }
        else
        {
            root->left = myBuildTree(preorder, inorder, preorder_left + 1, preorder_left + size_left_subtree, inorder_left, inorder_root - 1);
            root->right = myBuildTree(preorder, inorder, preorder_left + size_left_subtree + 1, preorder_right, inorder_root + 1, inorder_right);
        }
        
        
        // 递归地构造左子树，并连接到根节点
        // 先序遍历中「从 左边界+1 开始的 size_left_subtree」个元素就对应了中序遍历中「从 左边界 开始到 根节点定位-1」的元素
        
        // 递归地构造右子树，并连接到根节点
        // 先序遍历中「从 左边界+1+左子树节点数目 开始到 右边界」的元素就对应了中序遍历中「从 根节点定位+1 到 右边界」的元素
        
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        int n = preorder.size();
        // 构造哈希映射，帮助我们快速定位根节点
        for (int i = 0; i < n; ++i) {
            index[inorder[i]] = i;
        }
        return myBuildTree(preorder, inorder, 0, n - 1, 0, n - 1);
    }
};


int main()
{
    
    vector<int> preorder = {3,9,20,15,7}; // vlr
    vector<int> inorder= {9,3,15,20,7}; // lvr
    
    Solution abc;
    TreeNode* root = abc.buildTree(preorder, inorder);
    cout << root  -> left -> val;

    return 0;
}